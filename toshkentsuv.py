import logging, asyncio, aiosqlite, re
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode, ChatType, ContentType

# !!! –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ !!!
API_TOKEN = '5647678711:AAHYnN64A-1OdDtzSUGZ4F6i_-MQhNHke3M'
ADMIN_CHAT_IDS = [7880940719,5366741102,  ] # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
GROUP_CHAT_ID = -4623233228 # ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö (–º–æ–∂–µ—Ç –±—ã—Ç—å –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ –∫–∞–Ω–∞–ª–æ–º)
# !!! –ö–æ–Ω–µ—Ü –≤–∞–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π !!!

PRICE_PER_BOTTLE = 16000

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN, timeout=60)
storage = MemoryStorage() # –ò—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã; –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ FileStorage –∏–ª–∏ RedisStorage
dp = Dispatcher(storage=storage)
db: aiosqlite.Connection = None  # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ; –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ main()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def fmt_phone(num: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã."""
    cleaned_num = re.sub(r'[^\d+]', '', num)
    return cleaned_num

def localize_date(dt: datetime, lang: str) -> str:
    """–õ–æ–∫–∞–ª–∏–∑—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    day = dt.day
    year = dt.year
    time_str = dt.strftime("%H:%M")
    if lang == "ru":
        months = {1:"—è–Ω–≤–∞—Ä—è", 2:"—Ñ–µ–≤—Ä–∞–ª—è", 3:"–º–∞—Ä—Ç–∞", 4:"–∞–ø—Ä–µ–ª—è", 5:"–º–∞—è", 6:"–∏—é–Ω—è",
                  7:"–∏—é–ª—è", 8:"–∞–≤–≥—É—Å—Ç–∞", 9:"—Å–µ–Ω—Ç—è–±—Ä—è", 10:"–æ–∫—Ç—è–±—Ä—è", 11:"–Ω–æ—è–±—Ä—è", 12:"–¥–µ–∫–∞–±—Ä—è"}
        return f"{day:02d} {months.get(dt.month, str(dt.month))} {year} –≥., {time_str}"
    else: # uz
        months = {1:"yanvar", 2:"fevral", 3:"mart", 4:"aprel", 5:"may", 6:"iyun",
                  7:"iyul", 8:"avgust", 9:"sentyabr", 10:"oktyabr", 11:"noyabr", 12:"dekabr"}
        return f"{day:02d} {months.get(dt.month, str(dt.month))} {year}, {time_str}"

async def get_user_lang(user_id: int, state: FSMContext = None) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM, –∑–∞—Ç–µ–º –∏–∑ –ë–î.
    –ï—Å–ª–∏ state –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏–ª–∏ —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'ru'.
    –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —è–∑—ã–∫ –≤ state, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω –≤ –ë–î –∏ state –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.
    """
    if state:
        data = await state.get_data()
        if 'language' in data:
            return data['language']
    # –ï—Å–ª–∏ —è–∑—ã–∫–∞ –Ω–µ—Ç –≤ state –∏–ª–∏ state –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑ –ë–î
    if db:
        try:
            async with db.execute("SELECT language FROM clients WHERE user_id=?", (user_id,)) as cur:
                row = await cur.fetchone()
                if row and row[0]:
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≤ –ë–î, —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ state –¥–ª—è –±—É–¥—É—â–∏—Ö –±—ã—Å—Ç—Ä—ã—Ö –¥–æ—Å—Ç—É–ø–æ–≤
                    if state: await state.update_data(language=row[0])
                    return row[0]
        except Exception as e:
            logger.error(f"Error getting language from DB for user {user_id}: {e}")

    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ state, –Ω–∏ –≤ –ë–î
    if state: await state.update_data(language='ru') # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤ state
    return 'ru'


async def is_user_registered(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –≤ –ë–î)."""
    if db is None:
         logger.error("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ is_user_registered.")
         return False
    try:
        async with db.execute("SELECT name FROM clients WHERE user_id=?", (user_id,)) as cur:
            row = await cur.fetchone()
            # –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –∏ –ø–æ–ª–µ 'name' –Ω–µ –ø—É—Å—Ç–æ–µ
            return bool(row and row[0])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

# --- FSM States ---
class LangSelect(StatesGroup):
    choosing = State()

class OrderForm(StatesGroup):
    contact = State()
    name = State()
    location = State() # –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–∏–∑–Ω–∞–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    address = State() # –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å, –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –ø–æ—Å–ª–µ location
    additional = State()
    quantity = State()
    confirm = State()

class AdminStates(StatesGroup):
    main = State() # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
    confirm_clear_clients = State()
    confirm_clear_orders = State()
    # –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å—Ç–∞–Ω–µ—Ç —Å–ª–æ–∂–Ω—ã–º

# --- –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏ –∫–Ω–æ–ø–∫–∏ ---
TEXT = {
    'ru': {
        'choose_language': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'welcome': "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!",
        'greeting_prompt': "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!\n\n", # –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º
        'send_contact': "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        'prompt_contact': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞.",
        'contact_saved': "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.",
        'please_full_name': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤'), –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.",
        'name_saved': "–°–ø–∞—Å–∏–±–æ, {name}! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é.",
        'send_location': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é.",
        'address_prompt': "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: —Ä–∞–π–æ–Ω, —É–ª–∏—Ü—É, –Ω–æ–º–µ—Ä –¥–æ–º–∞ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å).",
        'additional_prompt': "–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä —Å–æ—Å–µ–¥–µ–π –∏–ª–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        'input_quantity': "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–µ–π (—à—Ç.).\n–¶–µ–Ω–∞ –∑–∞ –±—É—Ç—ã–ª–∫—É: {price:,} —Å—É–º.",
        'order_summary': "üõçÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:",
        'order_confirmed': "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
        'order_cancelled': "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –ù–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ 'üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞' –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.",
        'main_menu': "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        'change_lang': "üîÑ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
        'my_orders_title': "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã:",
        'no_orders': "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
        'order_info': "‚Ññ{order_id} | {order_time} | {quantity} —à—Ç | –°—Ç–∞—Ç—É—Å: {status}\n–ê–¥—Ä–µ—Å: {address}",
        'access_denied': "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
        'choose_admin_action': "üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:",
        'clear_clients_confirm': "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –£–î–ê–õ–ò–¢–¨ –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤ –ò –ò–• –ó–ê–ö–ê–ó–´? –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        'clear_orders_confirm': "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –£–î–ê–õ–ò–¢–¨ –í–°–ï –∑–∞–∫–∞–∑—ã? –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        'db_clients_cleared': "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∏ –∑–∞–∫–∞–∑–æ–≤) –æ—á–∏—â–µ–Ω–∞.",
        'db_orders_cleared': "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –æ—á–∏—â–µ–Ω–∞.",
        'action_cancelled': "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        'feature_not_implemented': "üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.",
        'invalid_input': "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å.",
        'back_to_main': "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        'process_cancelled': "–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω.",
        'error_processing': "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
        # Order statuses (keys should be consistent with DB)
        'status_pending': '–û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        'status_accepted': '–ü—Ä–∏–Ω—è—Ç',
        'status_in_progress': '–í —Ä–∞–±–æ—Ç–µ',
        'status_completed': '–í—ã–ø–æ–ª–Ω–µ–Ω',
        'status_rejected': '–û—Ç–º–µ–Ω–µ–Ω',
        # Admin status buttons (inline) - text for buttons shown to ADMIN
        'admin_status_accept': '‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
        'admin_status_reject': '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
        'admin_status_complete': 'üì¶ –í—ã–ø–æ–ª–Ω–∏—Ç—å',
        # Client notifications about status change
        'client_status_update': "üì¶ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {status}\n\n{order_summary}",
        'admin_status_update_log': "–ó–∞–∫–∞–∑ ‚Ññ{order_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å '{status}' –∞–¥–º–∏–Ω–æ–º {admin_name} (@{admin_username}).",
        'order_already_finalized': "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} —É–∂–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π ({status}). –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.",
        'order_not_found': "–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."

    },
    'uz': {
        'choose_language': "Tilni tanlang:",
        'welcome': "üëã Xush kelibsiz, {name}!",
        'greeting_prompt': "üëã Xush kelibsiz, {name}!\n\n", # –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        'send_contact': "Boshlash uchun, iltimas, telefon raqamingizni yuboring.",
        'prompt_contact': "Iltimos, raqamingizni yuborish uchun 'üìû Kontaktni yuborish' tugmasini bosing.",
        'contact_saved': "‚úÖ Kontakt saqlandi. Endi to'liq ism va familiyangizni kiriting yoki pasport rasmini yuboring.",
        'please_full_name': "Iltimas, to'liq ism va familiyangizni matn shaklida kiriting (masalan, 'Ali Aliyev'), yoki pasport rasmini yuboring.",
        'name_saved': "Rahmat, {name}! Endi joylashuvingizni yuboring yoki manzilingizni qo'lda kiriting.",
        'send_location': "Geolokatsiyani yuboring yoki manzilni qo'lda kiriting.",
        'address_prompt': "To'liq yetkazib berish manzilini kiriting: tuman, ko'cha, uy va kvartira raqami (agar mavjud bo'lsa).",
        'additional_prompt': "Qo'shimcha aloqa raqamini kiriting (masalan, qo'shnilar yoki qarindoshlaringiz raqami) yoki 'O'tkazib yuborish' tugmasini bosing.",
        'input_quantity': "Iltimos, butilkalar sonini kiriting (dona).\nButilka narxi: {price:,} so'm.",
        'order_summary': "üõçÔ∏è Buyurtmangizni tasdiqlang:",
        'order_confirmed': "‚úÖ Buyurtmangiz qabul qilindi! Tafsilotlarni aniqlash uchun tez orada siz bilan bog'lanamiz.",
        'order_cancelled': "‚ùå Buyurtma bekor qilindi. Yangi buyurtma berish uchun /start yoki 'üîÑ Yangi boshlash' tugmasini bosing.",
        'main_menu': "üè† Bosh menyu:",
        'change_lang': "üîÑ Tilni almashtirish", # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
        'my_orders_title': "üì¶ Mening buyurtmalarim:",
        'no_orders': "Sizda hali buyurtmalar yo'q.",
        'order_info': "‚Ññ{order_id} | {order_time} | {quantity} dona | Holati: {status}\nManzil: {address}",
        'access_denied': "üö´ Bu buyruqqa ruxsat yo'q.",
        'choose_admin_action': "üîß Ma'lumotlar bazasi bilan amalni tanlang:",
        'clear_clients_confirm': "‚ö†Ô∏è BARCHA mijozlarni VA ULARNING BUYURTMALARINI O'CHIRIB yubormoqchimisiz? Bu qaytarilmaydigan amal.",
        'clear_orders_confirm': "‚ö†Ô∏è BARCHA buyurtmalarni O'CHIRIB yubormoqchimisiz? Bu qaytarilmaydigan amal.",
        'db_clients_cleared': "‚úÖ Mijozlar (va buyurtmalar) ma'lumotlar bazasi tozalandi.",
        'db_orders_cleared': "‚úÖ Buyurtmalar ma'lumotlar bazasi tozalandi.",
        'action_cancelled': "Amal bekor qilindi.",
        'feature_not_implemented': "üöß Bu funksiya hali ishga tushirilmagan.",
        'invalid_input': "Noto'g'ri kiritish. Iltimas, qaytadan urinib ko'ring yoki jarayonni bekor qiling.",
        'back_to_main': "Bosh menyuga qaytish.",
        'process_cancelled': "Jarayon bekor qilindi.",
        'error_processing': "So'rovingizni qayta ishlashda xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring yoki qo'llab-quvvatlash xizmati bilan bog'laning.",
        # Order statuses (keys should be consistent with DB)
        'status_pending': 'Ishlov berish kutilmoqda',
        'status_accepted': 'Qabul qilindi',
        'status_in_progress': 'Jarayonda',
        'status_completed': 'Bajarildi',
        'status_rejected': 'Bekor qilindi',
        # Admin status buttons (inline) - text for buttons shown to ADMIN
        'admin_status_accept': '‚úÖ Qabul qilish',
        'admin_status_reject': '‚ùå Bekor qilish',
        'admin_status_complete': 'üì¶ Bajarildi',
        # Client notifications about status change
        'client_status_update': "üì¶ Sizning ‚Ññ{order_id} buyurtmangiz holati yangilandi: {status}\n\n{order_summary}",
        'admin_status_update_log': "Buyurtma ‚Ññ{order_id} holati admin {admin_name} (@{admin_username}) tomonidan '{status}' ga o'zgartirildi.",
        'order_already_finalized': "‚Ññ{order_id} buyurtmasining holati allaqachon yakunlangan ({status}). O'zgartirish mumkin emas.",
        'order_not_found': "{order_id} ID raqamli buyurtma topilmadi."
    }
}

# –ú–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–π —Å—Ç–∞—Ç—É—Å–æ–≤ –∫ —Ç–µ–∫—Å—Ç–∞–º
STATUS_MAP = {
    'pending': {'ru': TEXT['ru']['status_pending'], 'uz': TEXT['uz']['status_pending']},
    'accepted': {'ru': TEXT['ru']['status_accepted'], 'uz': TEXT['uz']['status_accepted']},
    'in_progress': {'ru': TEXT['ru']['status_in_progress'], 'uz': TEXT['uz']['status_in_progress']},
    'completed': {'ru': TEXT['ru']['status_completed'], 'uz': TEXT['uz']['status_completed']},
    'rejected': {'ru': TEXT['ru']['status_rejected'], 'uz': TEXT['uz']['status_rejected']},
}

# –ú–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–π —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ (—á—Ç–æ–±—ã –∏–∑ accept –ø–æ–ª—É—á–∏—Ç—å accepted)
ADMIN_STATUS_CALLBACK_MAP = {
    'accept': 'accepted', # –ü—Ä–∏–Ω—è—Ç—å -> –ü—Ä–∏–Ω—è—Ç
    'reject': 'rejected', # –û—Ç–º–µ–Ω–∏—Ç—å -> –û—Ç–º–µ–Ω–µ–Ω
    'complete': 'completed', # –í—ã–ø–æ–ª–Ω–∏—Ç—å -> –í—ã–ø–æ–ª–Ω–µ–Ω
}


BTN = {
    'ru': {
        'send_contact': "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç",
        'cancel': "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
        'send_location': "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é",
        'enter_address': "üè† –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é",
        'start_over': "üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞",
        'my_orders': "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã",
        'edit_order': "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑", # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
        'manage_db': "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö", # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        'skip': "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        'back': "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        # Admin buttons (inline) - text for buttons shown to ADMIN (use TEXT dict)
        'admin_clear_clients': "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤",
        'admin_clear_orders': "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã",
        'admin_confirm_yes': "‚úÖ –î–∞",
        'admin_confirm_no': "‚ùå –ù–µ—Ç",
    },
    'uz': {
        'send_contact': "üìû Kontaktni yuborish",
        'cancel': "‚ùå Bekor qilish",
        'send_location': "üìç Joylashuvni yuboring",
        'enter_address': "üè† Manzilni qo'lda kiritish",
        'start_over': "üîÑ Yangi boshlash",
        'my_orders': "üì¶ Buyurtmalarim",
        'edit_order': "‚úèÔ∏è Buyurtmani tahrirlash", # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
        'manage_db': "üîß Bazani boshqarish", # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        'skip': "O'tkazib yuborish",
        'back': "‚¨ÖÔ∏è Orqaga",
        # Admin buttons (inline) - text for buttons shown to ADMIN (use TEXT dict)
        'admin_clear_clients': "üóëÔ∏è Mijozlarni tozalash",
        'admin_clear_orders': "üóëÔ∏è Buyurtmalarni tozalash",
        'admin_confirm_yes': "‚úÖ Ha",
        'admin_confirm_no': "‚ùå Yo'q",
    }
}


# --- –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def kb_main(lang, is_admin=False, is_registered=False):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    kb = []
    if not is_registered:
        kb.append([KeyboardButton(text=BTN[lang]['send_contact'], request_contact=True)])

    kb.append([KeyboardButton(text=BTN[lang]['my_orders'])])

    # –ö–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑" –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
    # if is_registered:
    #    kb.append([KeyboardButton(text=BTN[lang]['edit_order'])])

    kb.append([KeyboardButton(text=BTN[lang]['start_over'])])

    if is_admin:
        kb.append([KeyboardButton(text=BTN[lang]['manage_db'])])

    kb.append([KeyboardButton(text=TEXT[lang]['change_lang'])])

    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def kb_location(lang):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏/–≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BTN[lang]['send_location'], request_location=True)],
            [KeyboardButton(text=BTN[lang]['enter_address'])],
            [KeyboardButton(text=BTN[lang]['cancel'])]
        ],
        resize_keyboard=True
    )

def kb_cancel_back(lang):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –û—Ç–º–µ–Ω–∞ –∏ –ù–∞–∑–∞–¥"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BTN[lang]['back'])],
            [KeyboardButton(text=BTN[lang]['cancel'])]
        ],
        resize_keyboard=True
    )

def kb_additional(lang):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–ø. –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –ù–∞–∑–∞–¥, –û—Ç–º–µ–Ω–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BTN[lang]['skip'])],
            [KeyboardButton(text=BTN[lang]['back'])],
            [KeyboardButton(text=BTN[lang]['cancel'])]
        ],
        resize_keyboard=True
    )

def kb_quantity(lang):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å –ù–∞–∑–∞–¥, –û—Ç–º–µ–Ω–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BTN[lang]['back'])],
            [KeyboardButton(text=BTN[lang]['cancel'])]
        ],
        resize_keyboard=True
    )

def kb_language_select():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text='üá∑üá∫ –†—É—Å—Å–∫–∏–π'), KeyboardButton(text='üá∫üáø –é–∑–±–µ–∫')]],
        resize_keyboard=True
    )

def kb_admin_db(lang):
    """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –ë–î"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=BTN[lang]['admin_clear_clients'], callback_data="admin_clear_clients")],
        [InlineKeyboardButton(text=BTN[lang]['admin_clear_orders'], callback_data="admin_clear_orders")],
    ])

def kb_admin_confirm(lang, action_type):
    """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    # action_type –±—É–¥–µ—Ç –ª–∏–±–æ 'clients', –ª–∏–±–æ 'orders'
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=BTN[lang]['admin_confirm_yes'], callback_data=f"admin_confirm_{action_type}_yes"),
            InlineKeyboardButton(text=BTN[lang]['admin_confirm_no'], callback_data=f"admin_confirm_{action_type}_no")
        ]
    ])

def kb_admin_order_status(order_id: int, lang: str) -> InlineKeyboardMarkup:
    """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∞–º–∏."""
    # –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ "set_status:<order_id>:<status_key>"
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –æ–±—ã—á–Ω–æ –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä—É—Å—Å–∫–æ–º) –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞.
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –∏–∑ TEXT[lang] –Ω–∞ —è–∑—ã–∫–µ –∞–¥–º–∏–Ω–∞.
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=TEXT[lang]['admin_status_accept'], callback_data=f"set_status:{order_id}:accept"),
            InlineKeyboardButton(text=TEXT[lang]['admin_status_reject'], callback_data=f"set_status:{order_id}:reject")
        ],
        [
            InlineKeyboardButton(text=TEXT[lang]['admin_status_complete'], callback_data=f"set_status:{order_id}:complete")
        ]
    ])
    return kb

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –æ–±—â–∏—Ö –∫–Ω–æ–ø–æ–∫ (—Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö) ---

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å" (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö OrderForm)
@dp.message(StateFilter(OrderForm), F.text.in_([BTN['ru']['cancel'], BTN['uz']['cancel']]))
async def handle_cancel_btn(message: types.Message, state: FSMContext):
    await cancel_process(message, state)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö OrderForm)
@dp.message(StateFilter(OrderForm.address, OrderForm.additional, OrderForm.quantity), F.text.in_([BTN['ru']['back'], BTN['uz']['back']]))
async def handle_back_btn(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = await get_user_lang(message.from_user.id, state)

    current_state = await state.get_state()

    if current_state == OrderForm.address.state:
        # –ò–∑ address –Ω–∞–∑–∞–¥ –≤ location
        await message.reply(TEXT[lang]['send_location'], reply_markup=kb_location(lang))
        await state.set_state(OrderForm.location)
        await state.update_data(address=None) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
    elif current_state == OrderForm.additional.state:
        # –ò–∑ additional –Ω–∞–∑–∞–¥ –≤ address
        await message.reply(TEXT[lang]['address_prompt'], reply_markup=kb_cancel_back(lang))
        await state.set_state(OrderForm.address)
        await state.update_data(additional_contact=None) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–æ–ø. –∫–æ–Ω—Ç–∞–∫—Ç
    elif current_state == OrderForm.quantity.state:
        # –ò–∑ quantity –Ω–∞–∑–∞–¥ –≤ additional
        await message.reply(TEXT[lang]['additional_prompt'], reply_markup=kb_additional(lang))
        await state.set_state(OrderForm.additional)
        await state.update_data(quantity=None) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ OrderForm.additional)
@dp.message(OrderForm.additional, F.text.in_([BTN['ru']['skip'], BTN['uz']['skip']]))
async def handle_skip_btn(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = await get_user_lang(message.from_user.id, state)
    await state.update_data(additional_contact=None) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ None
    await message.reply(TEXT[lang]['input_quantity'].format(price=PRICE_PER_BOTTLE), reply_markup=kb_quantity(lang))
    await state.set_state(OrderForm.quantity)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞" (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
@dp.message(F.text.in_([BTN['ru']['start_over'], BTN['uz']['start_over']]))
async def handle_start_over_btn(message: types.Message, state: FSMContext):
    await cmd_start(message, state) # –ü–æ —Å—É—Ç–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ /start

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫" (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
@dp.message(F.text.in_([TEXT['ru']['change_lang'], TEXT['uz']['change_lang']]))
async def handle_change_lang_btn(message: types.Message, state: FSMContext):
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤ —Ç.—á. –∑–∞–∫–∞–∑)
    await message.reply(TEXT['ru']['choose_language'], reply_markup=kb_language_select())
    await state.set_state(LangSelect.choosing)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã" (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
@dp.message(F.text.in_([BTN['ru']['my_orders'], BTN['uz']['my_orders']]))
async def handle_my_orders_btn(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    lang = await get_user_lang(uid, state)

    is_registered = await is_user_registered(uid)

    if not is_registered:
         await message.reply(TEXT[lang]['access_denied'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, is_registered))
         await state.clear()
         return

    try:
        async with db.execute("SELECT order_id, order_time, quantity, status, address, location_lat, location_lon FROM orders WHERE user_id=? ORDER BY order_time DESC", (uid,)) as cur:
            orders = await cur.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")
        await message.reply(TEXT[lang]['error_processing'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, True))
        await state.clear()
        return


    if not orders:
        await message.reply(TEXT[lang]['no_orders'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, True))
        await state.clear()
        return

    order_list = [TEXT[lang]['my_orders_title']]
    for order in orders:
        order_id, order_time_str, quantity, status_key, address, lat, lon = order
        try:
            order_dt = datetime.strptime(order_time_str, "%Y-%m-%d %H:%M:%S")
            localized_order_time = localize_date(order_dt, lang)
        except (ValueError, TypeError):
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {order_time_str}")
            localized_order_time = order_time_str

        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        localized_status = STATUS_MAP.get(status_key, {}).get(lang, status_key)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å/–ª–æ–∫–∞—Ü–∏—é
        display_address = address if address else (TEXT[lang].get('location', '–õ–æ–∫–∞—Ü–∏—è/Joylashuv') if lat is not None else TEXT[lang].get('not_specified', '–ù–µ —É–∫–∞–∑–∞–Ω/Belgilangan emas'))


        order_list.append(
            TEXT[lang]['order_info'].format(
                order_id=order_id,
                order_time=localized_order_time,
                quantity=quantity,
                status=localized_status,
                address=display_address
            )
        )

    await message.reply("\n\n".join(order_list), reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, True))
    await state.clear()


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑" (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
@dp.message(F.text.in_([BTN['ru']['edit_order'], BTN['uz']['edit_order']]))
async def handle_edit_order_btn(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    lang = await get_user_lang(uid, state)

    is_registered = await is_user_registered(uid)

    if is_registered:
        await message.reply(TEXT[lang]['feature_not_implemented'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, True))
        await state.clear()
    else:
        await message.reply(TEXT[lang]['access_denied'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, False))
        await state.clear()


# --- –•—ç–Ω–¥–ª–µ—Ä—ã –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ ---

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
@dp.message(F.text.in_([BTN['ru']['manage_db'], BTN['uz']['manage_db']]))
async def handle_manage_db_btn(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    lang = await get_user_lang(uid, state) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∞

    if uid not in ADMIN_CHAT_IDS:
        await message.reply(TEXT[lang]['access_denied'], reply_markup=kb_main(lang, False, await is_user_registered(uid)))
        await state.clear()
        return

    await message.reply(TEXT[lang]['choose_admin_action'], reply_markup=kb_admin_db(lang))
    await state.set_state(AdminStates.main)


# –•—ç–Ω–¥–ª–µ—Ä—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–æ—á–∏—Å—Ç–∫–∞)
@dp.callback_query(AdminStates.main, F.data.startswith("admin_clear_"))
async def handle_admin_clear_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    uid = callback.from_user.id
    lang = await get_user_lang(uid, state) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∞

    action = callback.data.split('_')[-1]

    if action == 'clients':
        confirm_text = TEXT[lang]['clear_clients_confirm']
        confirm_kb = kb_admin_confirm(lang, 'clients')
        await state.set_state(AdminStates.confirm_clear_clients)
    elif action == 'orders':
        confirm_text = TEXT[lang]['clear_orders_confirm']
        confirm_kb = kb_admin_confirm(lang, 'orders')
        await state.set_state(AdminStates.confirm_clear_orders)
    else:
        await callback.message.edit_text(TEXT[lang]['invalid_input'], reply_markup=None)
        await state.clear()
        return

    await callback.message.edit_text(confirm_text, reply_markup=confirm_kb)


# –•—ç–Ω–¥–ª–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
@dp.callback_query(AdminStates.confirm_clear_clients, F.data.startswith("admin_confirm_clients_"))
async def handle_confirm_clear_clients(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    uid = callback.from_user.id
    lang = await get_user_lang(uid, state) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∞

    action = callback.data.split('_')[-1]

    if action == 'yes':
        try:
            await db.execute("DELETE FROM clients") # –° CASCADE orders —É–¥–∞–ª—è—Ç—Å—è —Ç–æ–∂–µ
            await db.commit()
            await callback.message.edit_text(TEXT[lang]['db_clients_cleared'], reply_markup=None)
            logger.info(f"–ê–¥–º–∏–Ω {uid} –æ—á–∏—Å—Ç–∏–ª –±–∞–∑—É –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∏ –∑–∞–∫–∞–∑–æ–≤).")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤/–∑–∞–∫–∞–∑–æ–≤ (–∞–¥–º–∏–Ω {uid}): {e}")
            await callback.message.edit_text(f"{TEXT[lang]['error_processing']} –û—à–∏–±–∫–∞: {e}", reply_markup=None)
    else: # action == 'no'
        await callback.message.edit_text(TEXT[lang]['action_cancelled'], reply_markup=None)
        logger.info(f"–ê–¥–º–∏–Ω {uid} –æ—Ç–º–µ–Ω–∏–ª –æ—á–∏—Å—Ç–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤.")

    await state.clear()
    is_registered = await is_user_registered(uid)
    await bot.send_message(uid, TEXT[lang]['back_to_main'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, is_registered))


# –•—ç–Ω–¥–ª–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
@dp.callback_query(AdminStates.confirm_clear_orders, F.data.startswith("admin_confirm_orders_"))
async def handle_confirm_clear_orders(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    uid = callback.from_user.id
    lang = await get_user_lang(uid, state) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∞

    action = callback.data.split('_')[-1]

    if action == 'yes':
        try:
            await db.execute("DELETE FROM orders")
            await db.commit()
            await callback.message.edit_text(TEXT[lang]['db_orders_cleared'], reply_markup=None)
            logger.info(f"–ê–¥–º–∏–Ω {uid} –æ—á–∏—Å—Ç–∏–ª –±–∞–∑—É –∑–∞–∫–∞–∑–æ–≤.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–∫–∞–∑–æ–≤ (–∞–¥–º–∏–Ω {uid}): {e}")
            await callback.message.edit_text(f"{TEXT[lang]['error_processing']} –û—à–∏–±–∫–∞: {e}", reply_markup=None)
    else: # action == 'no'
        await callback.message.edit_text(TEXT[lang]['action_cancelled'], reply_markup=None)
        logger.info(f"–ê–¥–º–∏–Ω {uid} –æ—Ç–º–µ–Ω–∏–ª –æ—á–∏—Å—Ç–∫—É –∑–∞–∫–∞–∑–æ–≤.")

    await state.clear()
    is_registered = await is_user_registered(uid)
    await bot.send_message(uid, TEXT[lang]['back_to_main'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, is_registered))


# --- –•—ç–Ω–¥–ª–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º ---
@dp.callback_query(F.data.startswith("set_status:"))
async def handle_admin_set_status(callback: types.CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    lang = await get_user_lang(uid, state) # –Ø–∑—ã–∫ –∞–¥–º–∏–Ω–∞
    admin_name = callback.from_user.full_name
    admin_username = callback.from_user.username or "N/A"


    if uid not in ADMIN_CHAT_IDS:
        await callback.answer(TEXT[lang]['access_denied'], show_alert=True)
        return

    try:
        # –ü–∞—Ä—Å–∏–º callback_data: set_status:<order_id>:<status_key>
        parts = callback.data.split(':')
        if len(parts) != 3:
            await callback.answer(TEXT[lang]['invalid_input'], show_alert=True)
            return
        order_id = int(parts[1])
        action_key = parts[2] # 'accept', 'reject', 'complete'
        new_status_key = ADMIN_STATUS_CALLBACK_MAP.get(action_key)

        if not new_status_key:
            await callback.answer(TEXT[lang]['invalid_input'], show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å, user_id –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–≤–æ–¥–∫–∏
        async with db.execute("SELECT user_id, status, contact, additional_contact, address, quantity, order_time, location_lat, location_lon FROM orders WHERE order_id=?", (order_id,)) as cur:
            order_row = await cur.fetchone()

        if not order_row:
            await callback.answer(TEXT[lang]['order_not_found'].format(order_id=order_id), show_alert=True)
            try:
                await callback.message.edit_reply_markup(reply_markup=None) # –£–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ {order_id}: {e}")
            return

        client_id, current_status_key, contact, additional_contact, address, quantity, order_time_str, lat, lon = order_row

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º
        final_statuses = ['completed', 'rejected'] # –ö–ª—é—á–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        if current_status_key in final_statuses:
            await callback.answer(TEXT[lang]['order_already_finalized'].format(order_id=order_id, status=STATUS_MAP.get(current_status_key,{}).get(lang, current_status_key)), show_alert=True)
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
            try:
                await callback.message.edit_reply_markup(reply_markup=None)
            except Exception as e:
                 logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ {order_id} –≤ —á–∞—Ç–µ {callback.message.chat.id}: {e}")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        await db.execute("UPDATE orders SET status=? WHERE order_id=?", (new_status_key, order_id))
        await db.commit()
        logger.info(f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_status_key}' –∞–¥–º–∏–Ω–æ–º {uid}")

        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        new_status_text_admin = STATUS_MAP.get(new_status_key, {}).get(lang, new_status_key)


        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —á–∞—Ç–µ/–≥—Ä—É–ø–ø–µ
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–µ–Ω—è–ª —Å—Ç–∞—Ç—É—Å
            log_message = TEXT[lang]['admin_status_update_log'].format(
                order_id=order_id,
                status=new_status_text_admin, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
                admin_name=admin_name,
                admin_username=admin_username
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è—è –ª–æ–≥ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            # –ü–∞—Ä—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –ª–æ–≥–∞
            current_text = callback.message.text
            log_start_index = current_text.find("<i>")
            if log_start_index != -1:
                 # –û–±—Ä–µ–∑–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–ª–∏—Å—å
                 base_text = current_text[:log_start_index].strip()
            else:
                 base_text = current_text.strip()

            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–µ
            # –ü—Ä–∏–º–µ—Ä: "‚ú® –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            status_line_pattern = re.compile(r"‚ú® –°—Ç–∞—Ç—É—Å: .*")
            if status_line_pattern.search(base_text):
                 base_text = status_line_pattern.sub(f"‚ú® –°—Ç–∞—Ç—É—Å: {new_status_text_admin}", base_text)
            else:
                 # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ –∫–æ–Ω–µ—Ü –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                 base_text += f"\n‚ú® –°—Ç–∞—Ç—É—Å: {new_status_text_admin}"


            updated_text = f"{base_text}\n\n<i>{log_message}</i>"


            await callback.message.edit_text(
                updated_text,
                parse_mode=ParseMode.HTML,
                reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ {order_id} –≤ —á–∞—Ç–µ {callback.message.chat.id}: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                 # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ state –±—ã–ª –æ—á–∏—â–µ–Ω
                 current_admin_lang = await get_user_lang(uid)
                 retry_log_message = TEXT[current_admin_lang]['admin_status_update_log'].format(
                    order_id=order_id,
                    status=STATUS_MAP.get(new_status_key, {}).get(current_admin_lang, new_status_key),
                    admin_name=admin_name,
                    admin_username=admin_username
                 )
                 await bot.send_message(callback.message.chat.id, f"<i>{retry_log_message}</i>", parse_mode=ParseMode.HTML)
            except Exception as e2:
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {order_id}: {e2}")


        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        client_lang = await get_user_lang(client_id) # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∫–ª–∏–µ–Ω—Ç–∞
        client_new_status_text = STATUS_MAP.get(new_status_key, {}).get(client_lang, new_status_key) # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ confirm_order)
        total = quantity * PRICE_PER_BOTTLE
        display_address = address if address else (TEXT[client_lang].get('location', '–õ–æ–∫–∞—Ü–∏—è/Joylashuv') if lat is not None else TEXT[client_lang].get('not_specified', '–ù–µ —É–∫–∞–∑–∞–Ω/Belgilangan emas'))

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–≤–æ–¥–∫–∏
        client_info_db = {}
        try:
            async with db.execute("SELECT name, contact, username FROM clients WHERE user_id=?", (client_id,)) as cur:
                row = await cur.fetchone()
                if row:
                    client_info_db = {"name": row[0], "contact": row[1], "username": row[2]}
        except Exception as e:
             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ –æ –∫–ª–∏–µ–Ω—Ç–µ {client_id} –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ: {e}")
             # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ order_row
             client_info_db = {"name": "–ù–µ —É–∫–∞–∑–∞–Ω", "contact": contact, "username": ""}


        client_summary = (
            f"üë§ {client_info_db.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')}" + (f" (@{client_info_db.get('username')})" if client_info_db.get('username') else "") + "\n"
            f"üìû –û—Å–Ω–æ–≤–Ω–æ–π: {client_info_db.get('contact')}\n"
            f"üìû –î–æ–ø.: {additional_contact or ('‚Äì' if client_lang == 'ru' else '‚Äì')}\n"
            f"üìç –ê–¥—Ä–µ—Å: {display_address}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} " + ("—à—Ç" if client_lang == "ru" else "dona") + f" (–û–±—â–∞—è —Å—É–º–º–∞: {total:,} " + ("—Å—É–º" if client_lang == "ru" else "so'm") + ")\n"
        )


        client_notification_text = TEXT[client_lang]['client_status_update'].format(
            order_id=order_id,
            status=client_new_status_text, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            order_summary=client_summary
        )
        try:
            await bot.send_message(client_id, client_notification_text)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {order_id} –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")


    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {callback.data} –∞–¥–º–∏–Ω–æ–º {uid}: {e}")
        await callback.answer(TEXT[lang]['error_processing'], show_alert=True)


# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞ ---

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    logger.info(f"/start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {message.from_user.id} –≤ —á–∞—Ç–µ: {message.chat.type}")
    await state.clear() # –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    uid = message.from_user.id

    is_registered = False
    lang = 'ru' # –î–µ—Ñ–æ–ª—Ç —è–∑—ã–∫
    name = None
    contact = None

    try:
        async with db.execute("SELECT name, contact, language FROM clients WHERE user_id=?", (uid,)) as cur:
            row = await cur.fetchone()
            if row:
                db_name, db_contact, db_lang = row
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫
                lang = db_lang or 'ru'
                await state.update_data(language=lang) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ state

                if db_name: # –ï—Å–ª–∏ –∏–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                    name = db_name
                    contact = db_contact
                    await state.update_data(name=name, contact=contact)
                    is_registered = True
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –Ø–∑—ã–∫: {lang}. –ò–º—è: {name}") # –õ–æ–≥–∏—Ä—É–µ–º –∏–º—è
                else: # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —è–∑—ã–∫, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–º–µ–Ω–∏
                     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –Ø–∑—ã–∫: {lang}")
                     # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
                     await state.set_state(OrderForm.contact)
                     await message.reply(TEXT[lang]['send_contact'],
                                         reply_markup=ReplyKeyboardMarkup(
                                             keyboard=[[KeyboardButton(text=BTN[lang]['send_contact'], request_contact=True)],
                                                       [KeyboardButton(text=BTN[lang]['cancel'])]],
                                             resize_keyboard=True))
                     return # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ö—ç–Ω–¥–ª–µ—Ä–∞

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ë–î –∏–ª–∏ –¥—Ä—É–≥–æ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∫–∞–∫ fallback
        await message.reply(TEXT['ru']['error_processing'], reply_markup=kb_language_select())
        await state.set_state(LangSelect.choosing)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (is_registered == True)
    if is_registered:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–∫–∞–∑
        greeting_text = TEXT[lang]['greeting_prompt'].format(name=name)
        next_step_text = TEXT[lang]['send_location']
        await message.reply(greeting_text + next_step_text, reply_markup=kb_location(lang))
        await state.set_state(OrderForm.location)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π (row is None)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –Ω–æ–≤—ã–π. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫.")
        await message.reply(TEXT['ru']['choose_language'], reply_markup=kb_language_select())
        await state.set_state(LangSelect.choosing)


@dp.message(LangSelect.choosing, F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üáø –é–∑–±–µ–∫"]))
async def process_lang(message: types.Message, state: FSMContext):
    lang = "ru" if message.text.startswith("üá∑üá∫") else "uz"
    await state.update_data(language=lang)
    uid = message.from_user.id
    usernm = message.from_user.username or ""

    try:
        await db.execute(
            "INSERT INTO clients(user_id, username, language) VALUES(?, ?, ?) "
            "ON CONFLICT(user_id) DO UPDATE SET username=excluded.username, language=excluded.language",
            (uid, usernm, lang)
        )
        await db.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –≤—ã–±—Ä–∞–ª —è–∑—ã–∫: {lang}")
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –≤ process_lang –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {uid}: {e}")
         await message.reply(TEXT[lang]['error_processing'])
         await state.clear()
         await message.reply(TEXT[lang]['process_cancelled'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, await is_user_registered(uid)))
         return


    await message.reply(TEXT[lang]['send_contact'],
                        reply_markup=ReplyKeyboardMarkup(
                            keyboard=[[KeyboardButton(text=BTN[lang]['send_contact'], request_contact=True)],
                                      [KeyboardButton(text=BTN[lang]['cancel'])]],
                            resize_keyboard=True))
    await state.set_state(OrderForm.contact)

@dp.message(OrderForm.contact, F.content_type == "contact")
async def reg_contact(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = await get_user_lang(message.from_user.id, state)
    num = message.contact.phone_number
    formatted = fmt_phone(num)
    uid = message.from_user.id
    usernm = message.from_user.username or ""

    try:
        await db.execute(
            "UPDATE clients SET contact=?, username=? WHERE user_id=?",
            (formatted, usernm, uid))
        await db.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Å–æ—Ö—Ä–∞–Ω–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç: {formatted}")
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –≤ reg_contact –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {uid}: {e}")
         await message.reply(TEXT[lang]['error_processing'])
         await state.clear()
         await message.reply(TEXT[lang]['process_cancelled'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, await is_user_registered(uid)))
         return

    await state.update_data(contact=formatted)
    await message.reply(TEXT[lang]['contact_saved'],
                        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=BTN[lang]['cancel'])]], resize_keyboard=True))
    await state.set_state(OrderForm.name)

@dp.message(OrderForm.contact) # –õ–æ–≤–∏—Ç –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç/—Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
async def prompt_contact_again(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = await get_user_lang(message.from_user.id, state)
    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å" –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ö—ç–Ω–¥–ª–µ—Ä–æ–º handle_cancel_btn
    await message.reply(TEXT[lang]['prompt_contact'],
                        reply_markup=ReplyKeyboardMarkup(keyboard=[
                            [KeyboardButton(text=BTN[lang]['send_contact'], request_contact=True)],
                            [KeyboardButton(text=BTN[lang]['cancel'])]
                        ], resize_keyboard=True))

@dp.message(OrderForm.name, F.content_type == "text")
async def reg_name_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = await get_user_lang(message.from_user.id, state)
    name = message.text.strip()

    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å" –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ö—ç–Ω–¥–ª–µ—Ä–æ–º handle_cancel_btn
    # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—â–µ–≥–æ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∏—Ç—å".

    if len(name.split()) < 2:
         return await message.reply(TEXT[lang]['please_full_name'])

    uid = message.from_user.id
    try:
        await db.execute("UPDATE clients SET name=? WHERE user_id=?", (name, uid))
        await db.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Å–æ—Ö—Ä–∞–Ω–∏–ª –∏–º—è —Ç–µ–∫—Å—Ç–æ–º: {name}")
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –≤ reg_name_text –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {uid}: {e}")
         await message.reply(TEXT[lang]['error_processing'])
         await state.clear()
         await message.reply(TEXT[lang]['process_cancelled'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, await is_user_registered(uid)))
         return

    await state.update_data(name=name)
    await message.reply(TEXT[lang]['name_saved'].format(name=name), reply_markup=kb_location(lang))
    await state.set_state(OrderForm.location)

@dp.message(OrderForm.name, F.content_type == "photo")
async def reg_name_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = await get_user_lang(message.from_user.id, state)
    file_id = message.photo[-1].file_id
    uid = message.from_user.id
    name = f"–§–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞: {file_id}"

    try:
        await db.execute("UPDATE clients SET name=? WHERE user_id=?", (name, uid))
        await db.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞: {file_id}")
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –≤ reg_name_photo –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {uid}: {e}")
         await message.reply(TEXT[lang]['error_processing'])
         await state.clear()
         await message.reply(TEXT[lang]['process_cancelled'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, await is_user_registered(uid)))
         return

    await state.update_data(name=name)
    await message.reply(TEXT[lang]['name_saved'].format(name="–ø–æ —Ñ–æ—Ç–æ"), reply_markup=kb_location(lang))
    await state.set_state(OrderForm.location)

@dp.message(OrderForm.location, F.content_type == "location")
async def loc_received(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = await get_user_lang(message.from_user.id, state)
    loc = message.location
    await state.update_data(location_lat=loc.latitude, location_lon=loc.longitude, address=None) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é
    await message.reply(TEXT[lang]['address_prompt'], reply_markup=kb_cancel_back(lang)) # –ü—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å –∞–¥—Ä–µ—Å (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    await state.set_state(OrderForm.address)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ OrderForm.location
@dp.message(OrderForm.location, F.text.in_([BTN['ru']['enter_address'], BTN['uz']['enter_address']]))
async def enter_addr_manual(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = await get_user_lang(message.from_user.id, state)
    await state.update_data(location_lat=None, location_lon=None, address=None) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –∏ –∞–¥—Ä–µ—Å
    await message.reply(TEXT[lang]['address_prompt'], reply_markup=kb_cancel_back(lang))
    await state.set_state(OrderForm.address)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ OrderForm.location, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π
@dp.message(OrderForm.location, F.text)
async def handle_location_text_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = await get_user_lang(message.from_user.id, state)
    # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    # –Ω–∏ —Å –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ kb_location.
    await message.reply(TEXT[lang]['invalid_input'] + "\n\n" + TEXT[lang]['send_location'], reply_markup=kb_location(lang))


@dp.message(OrderForm.address, F.text) # –õ–æ–≤–∏–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥/–û—Ç–º–µ–Ω–∞ –ª–æ–≤—è—Ç—Å—è —Ä–∞–Ω–µ–µ)
async def handle_address_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = await get_user_lang(message.from_user.id, state)
    addr = message.text.strip()

    if not addr:
        return await message.reply(TEXT[lang]['address_prompt'])

    await state.update_data(address=addr)
    await message.reply(TEXT[lang]['additional_prompt'], reply_markup=kb_additional(lang))
    await state.set_state(OrderForm.additional)


@dp.message(OrderForm.additional, F.text) # –õ–æ–≤–∏–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å/–ù–∞–∑–∞–¥/–û—Ç–º–µ–Ω–∞ –ª–æ–≤—è—Ç—Å—è —Ä–∞–Ω–µ–µ)
async def handle_additional_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = await get_user_lang(message.from_user.id, state)
    extra = message.text.strip()

    await state.update_data(additional_contact=extra)

    await message.reply(TEXT[lang]['input_quantity'].format(price=PRICE_PER_BOTTLE), reply_markup=kb_quantity(lang))
    await state.set_state(OrderForm.quantity)


@dp.message(OrderForm.quantity, F.text) # –õ–æ–≤–∏–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥/–û—Ç–º–µ–Ω–∞ –ª–æ–≤—è—Ç—Å—è —Ä–∞–Ω–µ–µ)
async def handle_quantity_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = await get_user_lang(message.from_user.id, state)
    text = message.text.strip()

    if not text.isdigit() or int(text) <= 0:
        err = TEXT[lang]['invalid_input'] + (" –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ." if lang == "ru" else " Iltimos, musbat raqam kiriting.")
        return await message.reply(err)

    qty = int(text)
    await state.update_data(quantity=qty)

    data = await state.get_data() # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è quantity
    total = qty * PRICE_PER_BOTTLE

    uid = message.from_user.id
    user_info_db = {}
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ –ë–î –¥–ª—è —Å–≤–æ–¥–∫–∏
        async with db.execute("SELECT name, contact, username FROM clients WHERE user_id=?", (uid,)) as cur:
            row = await cur.fetchone()
            if row:
                user_info_db = {"name": row[0], "contact": row[1], "username": row[2]}
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ –æ –∫–ª–∏–µ–Ω—Ç–µ {uid} –¥–ª—è —Å–≤–æ–¥–∫–∏: {e}")
         pass # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ state


    display_name = user_info_db.get('name') or data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ' if lang == 'ru' else 'Belgilangan emas')
    username = user_info_db.get('username') or message.from_user.username or ""
    display_name_with_username = f"{display_name} (@{username})" if username else display_name
    contact_display = user_info_db.get('contact') or data.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω–æ' if lang == 'ru' else 'Belgilangan emas')
    additional_contact_display = data.get('additional_contact') or ('‚Äì' if lang == 'ru' else '‚Äì')
    address_display = data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ' if lang == 'ru' else 'Belgilangan emas')


    summary = (
        f"{TEXT[lang]['order_summary']}\n\n"
        f"üë§ {display_name_with_username}\n"
        f"üìû –û—Å–Ω–æ–≤–Ω–æ–π: {contact_display}\n"
        f"üìû –î–æ–ø.: {additional_contact_display}\n"
        f"üìç –ê–¥—Ä–µ—Å: {address_display}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty} " + ("—à—Ç" if lang == "ru" else "dona") + f" (–û–±—â–∞—è —Å—É–º–º–∞: {total:,} " + ("—Å—É–º" if lang == "ru" else "so'm") + ")\n"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ", callback_data="order_confirm")],
        [InlineKeyboardButton(text="‚ùå", callback_data="order_cancel")]
    ])
    await message.reply(summary, reply_markup=kb)
    await state.set_state(OrderForm.confirm)

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ---

@dp.callback_query(StateFilter(OrderForm.confirm), F.data == "order_confirm")
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = await get_user_lang(callback.from_user.id, state)
    await callback.answer("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!" if lang == "ru" else "‚úÖ Tasdiqlandi!")

    uid = callback.from_user.id

    contact = data.get("contact")
    additional_contact = data.get("additional_contact")
    location_lat = data.get("location_lat")
    location_lon = data.get("location_lon")
    address = data.get("address")
    quantity = data.get("quantity")

    if not (contact and (address or (location_lat is not None and location_lon is not None)) and quantity):
         logger.error(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}. State: {data}")
         await callback.message.edit_text(TEXT[lang]['error_processing'] + " " + (TEXT[lang]['start_over'] if lang == "ru" else "Yangi boshlash tugmasini bosib qaytadan urinib ko'ring."), reply_markup=None)
         await state.clear()
         await bot.send_message(uid, TEXT[lang]['back_to_main'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, await is_user_registered(uid)))
         return

    now = datetime.now()
    order_time_str = now.strftime("%Y-%m-%d %H:%M:%S")
    localized_date_str = localize_date(now, lang)

    order_id = None
    try:
        cursor = await db.cursor()
        # –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å 'pending'
        await cursor.execute(
            "INSERT INTO orders(user_id, contact, additional_contact, location_lat, location_lon, address, quantity, order_time, status) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)",
            (uid, contact, additional_contact, location_lat, location_lon, address, quantity, order_time_str, 'pending')
        )
        await db.commit()
        order_id = cursor.lastrowid
        await cursor.close()
        logger.info(f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_id} —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {uid}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")
        await callback.message.edit_text(TEXT[lang]['error_processing'] + " " + (TEXT[lang]['back_to_main'] if lang == "ru" else "Bosh menyuga qaytish."), reply_markup=None)
        await state.clear()
        await bot.send_message(uid, TEXT[lang]['back_to_main'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, await is_user_registered(uid)))
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è –∏ username –∏–∑ –ë–î –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    user_info_db = {}
    try:
        async with db.execute("SELECT name, username FROM clients WHERE user_id=?", (uid,)) as cur:
            row = await cur.fetchone()
            if row:
                user_info_db = {"name": row[0], "username": row[1]}
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ –æ –∫–ª–∏–µ–Ω—Ç–µ {uid} –¥–ª—è –∞–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
         # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å)
         user_info_db = {"name": data.get('name'), "username": callback.from_user.username}


    full_name = user_info_db.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω' if lang == 'ru' else 'Belgilangan emas')
    uname = user_info_db.get('username', "")
    display_name = f"{full_name} (@{uname})" if uname else full_name
    contact_display = user_info_db.get('contact') or data.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω–æ' if lang == 'ru' else 'Belgilangan emas')
    additional_contact_display = data.get('additional_contact') or ('‚Äì' if lang == 'ru' else '‚Äì')
    address_display = data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ' if lang == 'ru' else 'Belgilangan emas')

    total = quantity * PRICE_PER_BOTTLE

    msg_to_admin = (
        f"üì£ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b> (‚Ññ{order_id})\n\n"
        f"üë§ {display_name}\n"
        f"üìû –û—Å–Ω–æ–≤–Ω–æ–π: {contact_display}\n"
        f"üìû –î–æ–ø.: {additional_contact_display}\n"
        f"üìç –ê–¥—Ä–µ—Å: {address_display}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç (–û–±—â–∞—è —Å—É–º–º–∞: {total:,} —Å—É–º)\n"
        f"üïí –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {localized_date_str}\n"
        f"üÜî User ID: <code>{uid}</code>\n"
        f"‚ú® –°—Ç–∞—Ç—É—Å: {STATUS_MAP['pending']['ru']}" # –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∞–¥–º–∏–Ω–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏ –≥—Ä—É–ø–ø—ã —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
    admin_order_kb = kb_admin_order_status(order_id, 'ru') # –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    all_recipients = set(ADMIN_CHAT_IDS + [GROUP_CHAT_ID])
    for chat_id in all_recipients:
        if chat_id is None: continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º None ID
        try:
            sent_msg = await bot.send_message(chat_id, msg_to_admin, parse_mode=ParseMode.HTML, reply_markup=admin_order_kb)
            # –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å chat_id —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π?
            # –ù–∞–ø—Ä–∏–º–µ—Ä: await db.execute("UPDATE orders SET admin_message_chat_id=?, admin_message_id=? WHERE order_id=?", (sent_msg.chat.id, sent_msg.message_id, order_id))
            if location_lat is not None and location_lon is not None:
                await bot.send_location(chat_id, location_lat, location_lon)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ {order_id} –≤ —á–∞—Ç {chat_id}: {e}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.edit_text(callback.message.text + "\n\n" + TEXT[lang]['order_confirmed'], reply_markup=None)
    except Exception as e:
         logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")
         await bot.send_message(uid, TEXT[lang]['order_confirmed'], reply_markup=None)

    is_registered = await is_user_registered(uid)
    await bot.send_message(uid, TEXT[lang]['back_to_main'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, is_registered))
    await state.clear()


@dp.callback_query(StateFilter(OrderForm.confirm), F.data == "order_cancel")
async def cancel_order_callback(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = await get_user_lang(callback.from_user.id, state)
    await callback.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ" if lang == "ru" else "‚ùå Bekor qilindi")

    try:
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.edit_text(callback.message.text + "\n\n" + TEXT[lang]['order_cancelled'], reply_markup=None)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await bot.send_message(callback.from_user.id, TEXT[lang]['order_cancelled'], reply_markup=None)

    uid = callback.from_user.id
    is_registered = await is_user_registered(uid)
    await bot.send_message(uid, TEXT[lang]['back_to_main'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, is_registered))
    await state.clear()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ ---
async def cancel_process(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    lang = await get_user_lang(uid, state)

    is_registered = await is_user_registered(uid)

    await state.clear()
    await message.reply(TEXT[lang]['process_cancelled'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, is_registered))


# --- Default handler (–ª–æ–≤–∏—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è) ---
# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ü–û–°–õ–ï–î–ù–ò–ú
@dp.message(F.text)
async def default_text_handler(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    lang = await get_user_lang(uid, state)

    is_registered = await is_user_registered(uid)

    await message.reply(TEXT[lang]['invalid_input'] + " " + TEXT[lang]['back_to_main'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, is_registered))
    await state.clear()


# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á—Ç–æ-—Ç–æ, —á—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç (—Å—Ç–∏–∫–µ—Ä—ã, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ –∏ —Ç.–ø.)
@dp.message(~F.text & ~F.content_type.in_([ContentType.CONTACT, ContentType.LOCATION, ContentType.PHOTO]))
async def default_other_handler(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    lang = await get_user_lang(uid, state)

    is_registered = await is_user_registered(uid)

    await message.reply(TEXT[lang]['invalid_input'] + " " + TEXT[lang]['back_to_main'], reply_markup=kb_main(lang, uid in ADMIN_CHAT_IDS, is_registered))
    await state.clear()


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)."""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    if db is None:
         logger.error("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ init_db.")
         return
    try:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS clients (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                contact TEXT,
                name TEXT,
                language TEXT
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                order_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                contact TEXT,
                additional_contact TEXT,
                location_lat REAL,
                location_lon REAL,
                address TEXT,
                quantity INTEGER,
                order_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                status TEXT, -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–ª—é—á: 'pending', 'accepted', 'in_progress', 'completed', 'rejected'
                FOREIGN KEY (user_id) REFERENCES clients (user_id) ON DELETE CASCADE
            )
        ''')
        await db.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")


async def main():
    global db
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        db = await aiosqlite.connect("clients.db")
        db.row_factory = aiosqlite.Row
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ.")
        await init_db()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –∏–ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    try:
        # –ü–æ—Ä—è–¥–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤:
        # 1. –ö–æ–º–∞–Ω–¥—ã (/start)
        dp.message.register(cmd_start, Command("start"))

        # 2. –•—ç–Ω–¥–ª–µ—Ä—ã –∫–Ω–æ–ø–æ–∫, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (–û—Ç–º–µ–Ω–∞, –ù–∞–∑–∞–¥, –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
        dp.message.register(handle_cancel_btn, StateFilter(OrderForm), F.text.in_([BTN['ru']['cancel'], BTN['uz']['cancel']]))
        dp.message.register(handle_back_btn, StateFilter(OrderForm.address, OrderForm.additional, OrderForm.quantity), F.text.in_([BTN['ru']['back'], BTN['uz']['back']]))
        dp.message.register(handle_skip_btn, OrderForm.additional, F.text.in_([BTN['ru']['skip'], BTN['uz']['skip']]))

        # 3. –•—ç–Ω–¥–ª–µ—Ä—ã FSM –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (contact, location, photo, text) –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        dp.message.register(process_lang, LangSelect.choosing, F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üáø –é–∑–±–µ–∫"]))
        dp.message.register(reg_contact, OrderForm.contact, F.content_type == "contact")
        dp.message.register(prompt_contact_again, OrderForm.contact) # –õ–æ–≤–∏—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        dp.message.register(reg_name_text, OrderForm.name, F.content_type == "text")
        dp.message.register(reg_name_photo, OrderForm.name, F.content_type == "photo")
        dp.message.register(loc_received, OrderForm.location, F.content_type == "location")
        dp.message.register(enter_addr_manual, OrderForm.location, F.text.in_([BTN['ru']['enter_address'], BTN['uz']['enter_address']]))
        dp.message.register(handle_location_text_input, OrderForm.location, F.text) # –¢–µ–∫—Å—Ç –≤ location, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∫–Ω–æ–ø–∫–∞
        dp.message.register(handle_address_text, OrderForm.address, F.text)
        dp.message.register(handle_additional_text, OrderForm.additional, F.text)
        dp.message.register(handle_quantity_text, OrderForm.quantity, F.text)

        # 4. –•—ç–Ω–¥–ª–µ—Ä—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–æ–º, –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
        dp.callback_query.register(confirm_order, StateFilter(OrderForm.confirm), F.data == "order_confirm")
        dp.callback_query.register(cancel_order_callback, StateFilter(OrderForm.confirm), F.data == "order_cancel")
        dp.callback_query.register(handle_admin_clear_callback, AdminStates.main, F.data.startswith("admin_clear_"))
        dp.callback_query.register(handle_confirm_clear_clients, AdminStates.confirm_clear_clients, F.data.startswith("admin_confirm_clients_"))
        dp.callback_query.register(handle_confirm_clear_orders, AdminStates.confirm_clear_orders, F.data.startswith("admin_confirm_orders_"))
        dp.callback_query.register(handle_admin_set_status, F.data.startswith("set_status:")) # –•—ç–Ω–¥–ª–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞


        # 5. –û–±—â–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –∫–Ω–æ–ø–æ–∫ (–ú–æ–∏ –∑–∞–∫–∞–∑—ã, –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫, –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î), —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        dp.message.register(handle_start_over_btn, F.text.in_([BTN['ru']['start_over'], BTN['uz']['start_over']]))
        dp.message.register(handle_change_lang_btn, F.text.in_([TEXT['ru']['change_lang'], TEXT['uz']['change_lang']]))
        dp.message.register(handle_my_orders_btn, F.text.in_([BTN['ru']['my_orders'], BTN['uz']['my_orders']]))
        dp.message.register(handle_edit_order_btn, F.text.in_([BTN['ru']['edit_order'], BTN['uz']['edit_order']])) # Placeholder
        dp.message.register(handle_manage_db_btn, F.text.in_([BTN['ru']['manage_db'], BTN['uz']['manage_db']])) # Admin only


        # 6. –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã (–ª–æ–≤—è—â–∏–µ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ), —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ü–µ.
        # Non-text first
        dp.message.register(default_other_handler, ~F.text & ~F.content_type.in_([ContentType.CONTACT, ContentType.LOCATION, ContentType.PHOTO]))
        # Text last
        dp.message.register(default_text_handler, F.text)


        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–æ–ª–ª–∏–Ω–≥–∞: {e}")
    finally:
        if db:
            await db.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é –ø–æ KeyboardInterrupt")
    except Exception as e:
        logger.critical(f"–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {e}", exc_info=True)